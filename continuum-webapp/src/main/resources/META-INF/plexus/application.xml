<plexus>
  <load-on-start>
    <component>
      <role>org.apache.maven.continuum.Continuum</role>
    </component>
    <component>
      <role>org.apache.maven.continuum.security.acegi.acl.AclInitializer</role>
    </component>
    <component>
      <role>org.codehaus.plexus.taskqueue.execution.TaskQueueExecutor</role>
      <role-hint>build-project</role-hint>
    </component>
    <component>
      <role>org.codehaus.plexus.taskqueue.execution.TaskQueueExecutor</role>
      <role-hint>check-out-project</role-hint>
    </component>
    <!-- load on start to inject values into the aspect -->
    <component>
      <role>org.codehaus.plexus.acegi.intercept.method.aspectj.AspectJSecurityInterceptorHelper</role>
    </component>
  </load-on-start>

  <components>
    <!--
    | The mail notifier
    |-->
    <component>
      <role>org.codehaus.plexus.notification.notifier.Notifier</role>
      <role-hint>mail</role-hint>
      <implementation>org.apache.maven.continuum.notification.mail.MailContinuumNotifier</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.velocity.VelocityComponent</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.store.ContinuumStore</role>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.mailsender.MailSender</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.configuration.ConfigurationService</role>
        </requirement>
      </requirements>
      <configuration>
        <from-mailbox></from-mailbox>
        <from-name></from-name>
        <timestamp-format>EEE, d MMM yyyy HH:mm:ss Z</timestamp-format>
        <includeBuildResult>true</includeBuildResult>
        <alwaysSend>false</alwaysSend>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.notification.RecipientSource</role>
      <implementation>org.apache.maven.continuum.notification.ContinuumRecipientSource</implementation>
      <configuration>
        <!--
        Setting this propery will make Continuum send all emails to
        this address instead the address specified in the project
        configuration
        -->
        <to-override></to-override>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.mailsender.MailSender</role>
      <implementation>org.codehaus.plexus.mailsender.javamail.JavamailMailSender</implementation>
      <configuration>
        <smtp-host>localhost</smtp-host>
        <smtp-port>25</smtp-port>
        <sslProvider>com.sun.net.ssl.internal.ssl.Provider</sslProvider>
        <!--
        <username>mylogin</username>
        <password>mypassword</password>
        <sslMode>true</sslMode>
        -->
      </configuration>
    </component>

    <!--
    | The irc notifier
    |-->
    <component>
      <role>org.codehaus.plexus.notification.notifier.Notifier</role>
      <role-hint>irc</role-hint>
      <implementation>org.apache.maven.continuum.notification.irc.IrcContinuumNotifier</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.ircbot.IrcBot</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.store.ContinuumStore</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.configuration.ConfigurationService</role>
        </requirement>
      </requirements>
      <configuration>
        <alwaysSend>false</alwaysSend>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.ircbot.IrcBot</role>
      <implementation>org.codehaus.plexus.ircbot.DefaultIrcClient</implementation>
    </component>

    <!--
    | The jabber notifier
    |-->
    <component>
      <role>org.codehaus.plexus.notification.notifier.Notifier</role>
      <role-hint>jabber</role-hint>
      <implementation>org.apache.maven.continuum.notification.jabber.JabberContinuumNotifier</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.jabber.JabberClient</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.configuration.ConfigurationService</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.store.ContinuumStore</role>
        </requirement>
      </requirements>
      <configuration>
        <alwaysSend>false</alwaysSend>
        <!-- from-address/>
        <from-password/>
        <host/>
        <port/>
        <sslConnection>true</sslConnection -->
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.jabber.JabberClient</role>
      <implementation>org.codehaus.plexus.jabber.DefaultJabberClient</implementation>
    </component>

    <!--
    | The MSN notifier
    |-->
    <component>
      <role>org.codehaus.plexus.notification.notifier.Notifier</role>
      <role-hint>msn</role-hint>
      <implementation>org.apache.maven.continuum.notification.msn.MsnContinuumNotifier</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.msn.MsnClient</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.configuration.ConfigurationService</role>
        </requirement>
        <requirement>
          <role>org.apache.maven.continuum.store.ContinuumStore</role>
        </requirement>
      </requirements>
      <configuration>
        <alwaysSend>false</alwaysSend>
        <!-- from-address/>
        <from-password/ -->
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.msn.MsnClient</role>
      <implementation>org.codehaus.plexus.msn.DefaultMsnClient</implementation>
    </component>

    <component>
      <role>org.apache.maven.continuum.web.util.WorkingCopyContentGenerator</role>
      <implementation>org.apache.maven.continuum.web.util.WorkingCopyContentGenerator</implementation>
    </component>

    <!-- TODO share db configuration between components -->
    <component>
      <role>org.codehaus.plexus.jdo.JdoFactory</role>
      <implementation>org.codehaus.plexus.jdo.DefaultJdoFactory</implementation>
      <configuration>
        <properties>
          <!-- JPOX and JDO configuration -->
          <property>
            <name>javax.jdo.PersistenceManagerFactoryClass</name>
            <value>org.jpox.PersistenceManagerFactoryImpl</value>
          </property>
          <property>
            <name>org.jpox.autoCreateSchema</name>
            <value>true</value>
          </property>
          <property>
            <name>org.jpox.autoStartMechanism</name>
            <value>SchemaTable</value>
          </property>
          <property>
            <name>org.jpox.autoStartMechanismMode</name>
            <value>Ignored</value>
          </property>
          <!-- Apache Derby Configuration -->
          <property>
            <name>javax.jdo.option.ConnectionDriverName</name>
            <value>org.apache.derby.jdbc.EmbeddedDriver</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionURL</name>
            <value>jdbc:derby:${plexus.home}/database;create=true</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionUserName</name>
            <value>sa</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionPassword</name>
            <value></value>
          </property>

          <!-- Postgresql Configuration -->
          <!--
          <property>
            <name>javax.jdo.option.ConnectionDriverName</name>
            <value>org.postgresql.Driver</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionURL</name>
            <value>jdbc:postgresql://localhost/continuum</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionUserName</name>
            <value>trygvis</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionPassword</name>
            <value></value>
          </property>
          -->

          <!-- HSQLDB Configuration -->
          <!--
            NOTE: NO NOT USE THIS CONFIGURATION FOR A PRODUCTION SYSTEM.
            HSQLDB keeps all data in memory at all times.
          -->
          <!--
          <property>
            <name>javax.jdo.option.ConnectionDriverName</name>
            <value>org.hsqldb.jdbcDriver</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionURL</name>
            <value>jdbc:hsqldb:${plexus.home}/database</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionUserName</name>
            <value>sa</value>
          </property>
          <property>
            <name>javax.jdo.option.ConnectionPassword</name>
            <value></value>
          </property>

          <property>
            <name>org.jpox.transactionIsolation</name>
            <value>READ_UNCOMMITTED</value>
          </property>
          <property>
            <name>org.jpox.poid.transactionIsolation</name>
            <value>READ_UNCOMMITTED</value>
          </property>
          -->
          <property>
            <name>org.jpox.transactionIsolation</name>
            <value>READ_UNCOMMITTED</value>
          </property>
          <property>
            <name>org.jpox.poid.transactionIsolation</name>
            <value>READ_UNCOMMITTED</value>
          </property>
        </properties>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.rememberme.RememberMeServices</role>
      <implementation>org.apache.maven.continuum.web.rememberme.DefaultRememberMeServices</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>

    <!--
     | ACEGI Configuration
     -->
     
    <!-- Authentication -->

<!--
    <component>
      <role>org.acegisecurity.util.FilterChainProxy</role>
      <implementation>org.acegisecurity.util.FilterChainProxy</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.intercept.web.FilterInvocationDefinitionMap</role>
          <field-name>filterInvocationDefinitionSource</field-name>
        </requirement>
      </requirements>
      <configuration>
        <filterInvocationDefinitionSource>
            CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
            PATTERN_TYPE_APACHE_ANT
            /**=httpSessionContextIntegrationFilter,authenticationProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor
        </filterInvocationDefinitionSource>
      </configuration>
    </component>
-->

    <component>
      <role>org.acegisecurity.providers.ProviderManager</role>
      <implementation>org.acegisecurity.providers.ProviderManager</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.providers.dao.DaoAuthenticationProvider</role>
          <field-name>providers</field-name>
        </requirement>
      </requirements>
    </component>

    <!-- In memory database used only for testing -->
    <!-- Remember to remove passwordEncoder from org.acegisecurity.providers.dao.DaoAuthenticationProvider -->
<!--
    <component>
      <role>org.acegisecurity.userdetails.UserDetailsService</role>
      <implementation>org.acegisecurity.userdetails.memory.InMemoryDaoImpl</implementation>
      <configuration>
        <userProperties>
          <property>
            <name>marissa</name>
            <value>koala,ROLE_USER,ROLE_SUPERVISOR</value>
          </property>
          <property>
            <name>dianne</name>
            <value>emu,ROLE_USER</value>
          </property>
          <property>
            <name>scott</name>
            <value>wombat,ROLE_USER</value>
          </property>
        </userProperties>
      </configuration>
    </component>
-->
    <!-- Bridge between Acegi and Continuum database -->
    <component>
      <role>org.acegisecurity.userdetails.UserDetailsService</role>
      <implementation>org.apache.maven.continuum.security.acegi.ContinuumUserDetailsService</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.continuum.store.ContinuumStore</role>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.acegisecurity.providers.dao.DaoAuthenticationProvider</role>
      <implementation>org.acegisecurity.providers.dao.DaoAuthenticationProvider</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.userdetails.UserDetailsService</role>
          <field-name>userDetailsService</field-name>
        </requirement>
      </requirements>
      <configuration>
        <passwordEncoder implementation="org.acegisecurity.providers.encoding.ShaPasswordEncoder"/>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.event.authentication.LoggerListener</role>
      <implementation>org.acegisecurity.event.authentication.LoggerListener</implementation>
    </component>

    <component>
      <role>org.acegisecurity.context.HttpSessionContextIntegrationFilter</role>
      <implementation>org.acegisecurity.context.HttpSessionContextIntegrationFilter</implementation>
    </component>

    <component>
      <role>org.acegisecurity.ui.ExceptionTranslationFilter</role>
      <implementation>org.acegisecurity.ui.ExceptionTranslationFilter</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint</role>
          <field-name>authenticationEntryPoint</field-name>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.acegisecurity.ui.webapp.AuthenticationProcessingFilter</role>
      <implementation>org.acegisecurity.ui.webapp.AuthenticationProcessingFilter</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.providers.ProviderManager</role>
          <field-name>authenticationManager</field-name>
        </requirement>
      </requirements>
      <configuration>
        <authenticationFailureUrl>/login.jsp?login_error=1</authenticationFailureUrl>
        <defaultTargetUrl>/summary.action</defaultTargetUrl>
        <filterProcessesUrl>/j_acegi_security_check</filterProcessesUrl>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint</role>
      <implementation>org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint</implementation>
      <configuration>
        <loginFormUrl>/login.jsp</loginFormUrl>
        <forceHttps>false</forceHttps>
      </configuration>
    </component>


    <!-- authorization -->

    <!-- ACL database initialization -->
    <component>
      <role>org.apache.maven.continuum.security.acegi.acl.AclInitializer</role>
      <implementation>org.apache.maven.continuum.security.acegi.acl.AclInitializer</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.sql.SqlExecMojo</role>
          <field-name>sqlMojo</field-name>
        </requirement>
        <requirement>
          <role>org.acegisecurity.acl.basic.BasicAclDao</role>
          <field-name>dao</field-name>
        </requirement>
      </requirements>
      <configuration>
        <sqlClasspathResource>org/apache/maven/continuum/security/acegi/acl/acegi-acl-derby.sql</sqlClasspathResource>
      </configuration>
    </component>
    
    <!-- TODO share db configuration between components -->
    <component>
      <role>org.codehaus.mojo.sql.SqlExecMojo</role>
      <implementation>org.codehaus.mojo.sql.SqlExecMojo</implementation>
      <configuration>
        <username>sa</username>
        <password></password>
        <driver>org.apache.derby.jdbc.EmbeddedDriver</driver>
        <url>jdbc:derby:${plexus.home}/database;create=true</url>
        <onError>continue</onError>
      </configuration>
    </component>

    <!-- TODO share db configuration between components -->
    <component>
      <role>javax.sql.DataSource</role>
      <implementation>org.apache.commons.dbcp.BasicDataSource</implementation>
      <configuration>
        <driverClassName>org.apache.derby.jdbc.EmbeddedDriver</driverClassName>
        <url>jdbc:derby:${plexus.home}/database;create=true</url>
        <username>sa</username>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.acl.basic.BasicAclDao</role>
      <implementation>org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl</implementation>
      <component-composer>setter</component-composer>
      <requirements>
        <requirement>
          <role>javax.sql.DataSource</role>
          <field-name>dataSource</field-name>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.acegisecurity.intercept.web.FilterSecurityInterceptor</role>
      <implementation>org.acegisecurity.intercept.web.FilterSecurityInterceptor</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.providers.ProviderManager</role>
          <field-name>authenticationManager</field-name>
        </requirement>
        <requirement>
          <role>org.acegisecurity.AccessDecisionManager</role>
          <field-name>accessDecisionManager</field-name>
        </requirement>
      </requirements>
      <configuration>
        <objectDefinitionSource implementation="org.acegisecurity.intercept.web.FilterInvocationDefinitionDecorator">
          <decorated implementation="org.acegisecurity.intercept.web.PathBasedFilterInvocationDefinitionMap"/>
          <convertUrlToLowercaseBeforeComparison>true</convertUrlToLowercaseBeforeComparison>
          <mappings>
            <filterInvocationDefinitionSourceMapping>
              <url>/secure/**</url>
              <configAttributes>
                <configAttribute>ROLE_user</configAttribute>
              </configAttributes>
            </filterInvocationDefinitionSourceMapping>
            <filterInvocationDefinitionSourceMapping>
              <url>/add*project*</url>
              <configAttributes>
                <configAttribute>ROLE_admin</configAttribute>
                <configAttribute>ROLE_addProject</configAttribute>
              </configAttributes>
            </filterInvocationDefinitionSourceMapping>
            <filterInvocationDefinitionSourceMapping>
              <url>/schedules*</url>
              <configAttributes>
                <configAttribute>ROLE_admin</configAttribute>
                <configAttribute>ROLE_manageSchedule</configAttribute>
              </configAttributes>
            </filterInvocationDefinitionSourceMapping>
            <filterInvocationDefinitionSourceMapping>
              <url>/configuration*</url>
              <configAttributes>
                <configAttribute>ROLE_admin</configAttribute>
                <configAttribute>ROLE_manageConfiguration</configAttribute>
              </configAttributes>
            </filterInvocationDefinitionSourceMapping>
            <!-- TODO protect other URLs -->
          </mappings>
        </objectDefinitionSource>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.acegi.intercept.method.aspectj.AspectJSecurityInterceptorHelper</role>
      <implementation>org.codehaus.plexus.acegi.intercept.method.aspectj.AspectJSecurityInterceptorHelper</implementation>
      <requirements>
        <requirement>
      <role>org.acegisecurity.intercept.method.aspectj.AspectJSecurityInterceptor</role>
          <field-name>securityInterceptor</field-name>
        </requirement>
      </requirements>
      <configuration>
        <aspectName>org.apache.maven.continuum.security.acegi.aspectj.ContinuumSecurityAspect</aspectName>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.intercept.method.aspectj.AspectJSecurityInterceptor</role>
      <implementation>org.acegisecurity.intercept.method.aspectj.AspectJSecurityInterceptor</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.providers.ProviderManager</role>
          <field-name>authenticationManager</field-name>
        </requirement>
        <requirement>
          <role>org.acegisecurity.AccessDecisionManager</role>
          <field-name>accessDecisionManager</field-name>
        </requirement>
        <requirement>
          <role>org.acegisecurity.afterinvocation.AfterInvocationProviderManager</role>
          <field-name>afterInvocationManager</field-name>
        </requirement>
      </requirements>
      <configuration>
        <objectDefinitionSource implementation="org.acegisecurity.intercept.method.MethodDefinitionMap">
          <mappings>
            <methodDefinitionSourceMapping>
              <methodName>org.apache.maven.continuum.Continuum.addProject</methodName>
              <configAttributes>
                <configAttribute>ROLE_admin</configAttribute>
                <configAttribute>ROLE_addProject</configAttribute>
              </configAttributes>
            </methodDefinitionSourceMapping>
            <methodDefinitionSourceMapping>
              <methodName>org.apache.maven.continuum.Continuum.getProjectsInGroup</methodName>
              <configAttributes>
                <configAttribute>AFTER_ACL_COLLECTION_READ</configAttribute>
              </configAttributes>
            </methodDefinitionSourceMapping>
            <methodDefinitionSourceMapping>
              <methodName>org.apache.maven.continuum.Continuum.getAllProjectGroupsWithProjects</methodName>
              <configAttributes>
                <configAttribute>AFTER_ACL_COLLECTION_READ</configAttribute>
              </configAttributes>
            </methodDefinitionSourceMapping>
            <!-- TODO add configuration for all the other methods that need to be secured -->
          </mappings>
        </objectDefinitionSource>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.acl.AclProvider</role>
      <implementation>org.acegisecurity.acl.basic.BasicAclProvider</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.acl.basic.BasicAclDao</role>
          <field-name>basicAclDao</field-name>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.acegisecurity.acl.AclManager</role>
      <implementation>org.acegisecurity.acl.AclProviderManager</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.acl.AclProvider</role>
          <field-name>providers</field-name>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.acegisecurity.vote.AccessDecisionVoter</role>
      <role-hint>roleVoter</role-hint>
      <implementation>org.acegisecurity.vote.RoleVoter</implementation>
    </component>

    <component>
      <role>org.acegisecurity.vote.AccessDecisionVoter</role>
      <role-hint>aclProjectRead</role-hint>
      <implementation>org.acegisecurity.vote.BasicAclEntryVoter</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.acl.AclManager</role>
          <field-name>aclManager</field-name>
        </requirement>
      </requirements>
      <configuration>
        <processConfigAttribute>ACL_PROJECT_READ</processConfigAttribute>
        <processDomainObjectClass>org.apache.maven.continuum.model.project.Project</processDomainObjectClass>
        <requirePermissionFromString>
          <permission>ADMINISTRATION</permission>
          <permission>READ</permission>
        </requirePermissionFromString>
      </configuration>
    </component>

    <!-- An access decision manager used by the business objects -->
    <component>
      <role>org.acegisecurity.AccessDecisionManager</role>
      <implementation>org.acegisecurity.vote.AffirmativeBased</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.vote.AccessDecisionVoter</role>
          <field-name>decisionVoters</field-name>
        </requirement>
      </requirements>
      <configuration>
        <allowIfAllAbstainDecisions>false</allowIfAllAbstainDecisions>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.afterinvocation.AfterInvocationProvider</role>
      <role-hint>afterAclCollectionRead</role-hint>
      <implementation>org.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationCollectionFilteringProvider</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.acl.AclManager</role>
          <field-name>aclManager</field-name>
        </requirement>
      </requirements>
      <configuration>
        <requirePermissionFromString>
          <permission>ADMINISTRATION</permission>
          <permission>READ</permission>
        </requirePermissionFromString>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.afterinvocation.AfterInvocationProvider</role>
      <role-hint>afterAclRead</role-hint>
      <implementation>org.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationCollectionFilteringProvider</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.acl.AclManager</role>
          <field-name>aclManager</field-name>
        </requirement>
      </requirements>
      <configuration>
        <requirePermissionFromString>
          <permission>ADMINISTRATION</permission>
          <permission>READ</permission>
        </requirePermissionFromString>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.afterinvocation.AfterInvocationProviderManager</role>
      <implementation>org.acegisecurity.afterinvocation.AfterInvocationProviderManager</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.afterinvocation.AfterInvocationProvider</role>
          <field-name>providers</field-name>
        </requirement>
      </requirements>
    </component>


    <!--
     | Logger manager
     -->
    <component>
      <role>org.codehaus.plexus.logging.LoggerManager</role>
      <implementation>org.codehaus.plexus.logging.log4j.Log4JLoggerManager</implementation>
      <lifecycle-handler>basic</lifecycle-handler>

      <configuration>
        <threshold>INFO</threshold>
        <default-appender>console,rolling</default-appender>
        <appenders>
          <appender>
            <id>console</id>
            <threshold>DEBUG</threshold>
            <type>org.apache.log4j.ConsoleAppender</type>
            <conversion-pattern>%d [%t] %-5p %-30c{1} - %m%n</conversion-pattern>
          </appender>

          <appender>
            <id>rolling</id>
            <threshold>DEBUG</threshold>
            <type>org.apache.log4j.RollingFileAppender</type>
            <conversion-pattern>%-4r [%t] %-5p %c %x - %m%n</conversion-pattern>

            <properties>
              <property>
                <name>file</name>
                <value>${plexus.home}/logs/continuum.log</value>
              </property>
              <property>
                <name>append</name>
                <value>true</value>
              </property>
              <property>
                <name>maxBackupIndex</name>
                <value>10</value>
              </property>
              <property>
                <name>maxFileSize</name>
                <value>10MB</value>
              </property>
            </properties>
          </appender>
        </appenders>
        <levels>
          <level>
            <hierarchy>org.apache.maven.continuum.project.builder.ContinuumProjectBuilder</hierarchy>
            <level>DEBUG</level>
          </level>
          <level>
            <hierarchy>org.apache.maven.continuum.execution.maven.m2.DefaultMavenBuilderHelper</hierarchy>
            <level>INFO</level>
          </level>
          <level>
            <hierarchy>org.codehaus.plexus.velocity</hierarchy>
            <level>WARN</level>
          </level>
          <level>
            <hierarchy>org.codehaus.plexus.mailsender.MailSender</hierarchy>
            <level>INFO</level>
          </level>
          <level>
            <hierarchy>JPOX</hierarchy>
            <level>INFO</level>
          </level>
          <level>
            <hierarchy>JPOX.Cache</hierarchy>
            <level>WARN</level>
          </level>
          <level>
            <hierarchy>org.apache.jasper</hierarchy>
            <level>INFO</level>
          </level>
          <level>
            <hierarchy>com.opensymphony.xwork</hierarchy>
            <level>INFO</level>
          </level>
          <level>
            <hierarchy>com.opensymphony.webwork</hierarchy>
            <level>INFO</level>
          </level>
          <level>
            <hierarchy>org.extremecomponents</hierarchy>
            <level>INFO</level>
          </level>
          <!-- this does not work, needs the log4j.xml or log4j.properties
          <level>
            <hierarchy>org.acegisecurity</hierarchy>
            <level>DEBUG</level>
          </level>
          -->
        </levels>
      </configuration>
    </component>
  </components>

</plexus>
